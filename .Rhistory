###(1) Workspace Cleaning
#=======================
rm(list=ls())
try(dev.off(dev.list()["RStudioGD"]),silent=TRUE)
try(dev.off(),silent=TRUE)
cat("\014")
getwd()
setwd("C:/Users/shoro/Desktop/project")
library(sparklyr)
library(ggplot2)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(e1071)
require(caTools)
library(dplyr)
library(pls)
library(GGally)
library(ranger)
library(LiblineaR)
sc <- spark_connect(master = "local")
spark_web(sc)
diamond_tbl <- spark_read_csv(sc, name = "diamond_data", path = "dataset/diamonds_dataset.csv", header = TRUE, delimiter = ",")
diamond_tbl
diamond_tbl<- as.data.frame(diamond_tbl)
diamond_tbl<- subset(diamond_tbl, select=-c(url,date_fetched,id))
summary(diamond_tbl)
na.omit(diamond_tbl)
diamond_tbl<-diamond_tbl[!(diamond_tbl$price==1348720),]
#(5.3) casting char to factors
#==============================
diamond_tbl$shape <- as.factor(diamond_tbl$shape)
diamond_tbl$cut <- as.factor(diamond_tbl$cut)
diamond_tbl$color <- as.factor(diamond_tbl$color)
diamond_tbl$clarity <- as.factor(diamond_tbl$clarity)
diamond_tbl$type <- as.factor(diamond_tbl$type)
diamond_tbl$report <- as.factor(diamond_tbl$report)
summary(diamond_tbl)
str(diamond_tbl)
ggplot(diamond_tbl,aes(x=cut,y=carat))+geom_point()
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(log(price) ~ log(carat) + cut, data = trainData, method = "ranger",
trControl = train.control)
#(8.1) Spliting  Data
#====================
sample_size = floor(0.8*nrow(diamond_tbl))
set.seed(123)
# randomly split data in r
picked = sample(seq_len(nrow(diamond_tbl)),size = sample_size)
trainData =diamond_tbl[picked,]
testData =diamond_tbl[-picked,]
summary(trainData)
summary(testData)
cut <- trainData$cut
color <- trainData$color
clarity <- trainData$clarity
carat <- trainData$carat
shape <-  trainData$shape
type <-  trainData$type
price <-  trainData$price
cut <- factor(cut, ordered = FALSE)
color <- factor(color, ordered = FALSE)
clarity <- factor(clarity, ordered = FALSE)
fit <- lm(log(price) ~ log(carat) + cut + color + clarity + shape +type )
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(log(price) ~ log(carat) + cut, data = trainData, method = "ranger",
trControl = train.control)
# Summarize the results
randomforest_model <- model
summary(model)
vimp <- varImp(model)
vimp
plot(vimp)
trainData$predicted <- predict(model, newdata = trainData)
cor(log(trainData$price), trainData$predicted)
rmse(log(trainData$price), trainData$predicted)
###(1) Workspace Cleaning
#=======================
rm(list=ls())
try(dev.off(dev.list()["RStudioGD"]),silent=TRUE)
try(dev.off(),silent=TRUE)
cat("\014")
getwd()
setwd("C:/Users/shoro/Desktop/project")
library(sparklyr)
library(ggplot2)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(e1071)
require(caTools)
library(dplyr)
library(pls)
library(GGally)
library(ranger)
library(LiblineaR)
library(caret)
sc <- spark_connect(master = "local")
spark_web(sc)
diamond_tbl <- spark_read_csv(sc, name = "diamond_data", path = "dataset/diamonds_dataset.csv", header = TRUE, delimiter = ",")
diamond_tbl
diamond_tbl<- as.data.frame(diamond_tbl)
summary(diamond_tbl)
str(diamond_tbl)
diamond_tbl<- subset(diamond_tbl, select=-c(url,date_fetched,id))
summary(diamond_tbl)
na.omit(diamond_tbl)
diamond_tbl<-diamond_tbl[!(diamond_tbl$price==1348720),]
#(5.3) casting char to factors
#==============================
diamond_tbl$shape <- as.factor(diamond_tbl$shape)
diamond_tbl$cut <- as.factor(diamond_tbl$cut)
diamond_tbl$color <- as.factor(diamond_tbl$color)
diamond_tbl$clarity <- as.factor(diamond_tbl$clarity)
diamond_tbl$type <- as.factor(diamond_tbl$type)
diamond_tbl$report <- as.factor(diamond_tbl$report)
summary(diamond_tbl)
str(diamond_tbl)
ggplot(diamond_tbl,aes(x=cut,y=carat))+geom_point()
#(8.1) Spliting  Data
#====================
sample_size = floor(0.8*nrow(diamond_tbl))
set.seed(123)
# randomly split data in r
picked = sample(seq_len(nrow(diamond_tbl)),size = sample_size)
trainData =diamond_tbl[picked,]
testData =diamond_tbl[-picked,]
summary(trainData)
summary(testData)
cut <- trainData$cut
color <- trainData$color
clarity <- trainData$clarity
carat <- trainData$carat
shape <-  trainData$shape
type <-  trainData$type
price <-  trainData$price
cut <- factor(cut, ordered = FALSE)
color <- factor(color, ordered = FALSE)
clarity <- factor(clarity, ordered = FALSE)
fit <- lm(log(price) ~ log(carat) + cut + color + clarity + shape +type )
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(log(price) ~ log(carat) + cut, data = trainData, method = "ranger",
trControl = train.control)
# Summarize the results
randomforest_model <- model
summary(model)
vimp <- varImp(model)
vimp
plot(vimp)
trainData$predicted <- predict(model, newdata = trainData)
cor(log(trainData$price), trainData$predicted)
rmse(log(trainData$price), trainData$predicted)
library(Metrics)
library(Metrics)
install.packages(Metrics)
library(Metrics)
# Taking two vectors
actual = c(1.5, 1.0, 2.0, 7.4, 5.8, 6.6)
predicted = c(1.0, 1.1, 2.5, 7.3, 6.0, 6.2)
# Calculating RMSE using rmse()
result = rmse(actual, predicted)
# Printing the value
print(result)
install.packages("Metrics")
library(Metrics)
library(Metrics)
trainData$predicted <- predict(model, newdata = trainData)
cor(log(trainData$price), trainData$predicted)
rmse(log(trainData$price), trainData$predicted)
testData$predicted <- predict(model, newdata = testData)
cor(log(testData$price) ,testData$predicted)
rmse(log(testData$price), testData$predicted)
View(trainData)
zz <-rmse(log(testData$price), testData$predicted)
error_rate <- zz/mean(testData$price)
error_rate
accuracy <- (1- error_rate)*100
accuracy
z2  <- rmse(log(trainData$price), trainData$predicted)
z2  <- rmse(log(trainData$price), trainData$predicted)
error_rate <- z2/mean(trainData$price)
error_rate
accuracy <- (1- error_rate)*100
accuracy
z2  <- rmse(log(trainData$price), trainData$predicted)
z2
mean(trainData$price)
###(1) Workspace Cleaning
#=======================
rm(list=ls())
try(dev.off(dev.list()["RStudioGD"]),silent=TRUE)
try(dev.off(),silent=TRUE)
cat("\014")
getwd()
setwd("C:/Users/shoro/Desktop/project")
library(sparklyr)
library(ggplot2)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(e1071)
require(caTools)
library(dplyr)
library(pls)
library(GGally)
library(ranger)
library(LiblineaR)
library(caret)
library(Metrics)
install.packages("Metrics")
diamond_tbl <- spark_read_csv(sc, name = "diamond_data", path = "dataset/diamonds_dataset.csv", header = TRUE, delimiter = ",")
diamond_tbl
diamond_tbl<- as.data.frame(diamond_tbl)
sc <- spark_connect(master = "local")
spark_web(sc)
diamond_tbl <- spark_read_csv(sc, name = "diamond_data", path = "dataset/diamonds_dataset.csv", header = TRUE, delimiter = ",")
diamond_tbl
diamond_tbl<- as.data.frame(diamond_tbl)
summary(diamond_tbl)
str(diamond_tbl)
diamond_tbl<- subset(diamond_tbl, select=-c(url,date_fetched,id))
summary(diamond_tbl)
na.omit(diamond_tbl)
diamond_tbl<-diamond_tbl[!(diamond_tbl$price==1348720),]
#(5.3) casting char to factors
#==============================
diamond_tbl$shape <- as.factor(diamond_tbl$shape)
diamond_tbl$cut <- as.factor(diamond_tbl$cut)
diamond_tbl$color <- as.factor(diamond_tbl$color)
diamond_tbl$clarity <- as.factor(diamond_tbl$clarity)
diamond_tbl$type <- as.factor(diamond_tbl$type)
diamond_tbl$report <- as.factor(diamond_tbl$report)
summary(diamond_tbl)
str(diamond_tbl)
#(8.1) Spliting  Data
#====================
sample_size = floor(0.8*nrow(diamond_tbl))
set.seed(123)
# randomly split data in r
picked = sample(seq_len(nrow(diamond_tbl)),size = sample_size)
trainData =diamond_tbl[picked,]
testData =diamond_tbl[-picked,]
summary(trainData)
summary(testData)
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(log(price) ~ log(carat) + cut + color + clarity + shape +type, data = trainData, method = "ranger",
trControl = train.control)
# Summarize the results
randomforest_model <- model
summary(model)
trainData
trainData$predicted <- predict(model, newdata = trainData)
cor(log(trainData$price), trainData$predicted)
z2  <- rmse(log(trainData$price), trainData$predicted)
z2
error_rate <- z2/mean(trainData$price)
error_rate
accuracy <- (1- error_rate)*100
accuracy
testData$predicted <- predict(model, newdata = testData)
cor(log(testData$price) ,testData$predicted)
zz <-rmse(log(testData$price), testData$predicted)
error_rate <- zz/mean(testData$price)
error_rate
accuracy <- (1- error_rate)*100
accuracy
